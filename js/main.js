const canvas = document.createElement("canvas")
const gui = document.querySelector(".interface")
const taskbar = document.querySelector(".taskbar")
const filesystem = new Filesystem("apps", "jsos")
let maxZIndex = 1
let activeWindow = null
let offsetX, offsetY, initX, initY;
let temp;
filesystem.write({
	name: "config", type: "folder", contents: new Map([
		["config.json", { type: "application/json", contents: '{}' }]
	])
}, "storage/jsos/");
const createContextMenu = (x, y) => {
	const cm = document.createElement("div")
	cm.classList.add("context-menu")
	cm.style.left = x + "px"
	cm.style.top = y + "px"
	for (let i = 0; i < 4; i++) {
		const cmOption = document.createElement("p")
		cmOption.classList.add("cm-option")
		switch (i) {
			case 0:
				cmOption.textContent = "Install app"
				cmOption.onclick = () => {
					apps[prompt("What's the name of the app to install?")].install()
					cm.remove()
				}
				break;
			case 1:
				cmOption.textContent = "Run app"
				cmOption.onclick = () => {
					apps[prompt("What's the name of the app to run?")].run()
					cm.remove()
				}
				break;
			case 2:
				cmOption.textContent = "List directory contents"
				cmOption.onclick = () => {
					let dir = prompt("Which directory's contents would you like to view?")
					const dirArray = new Array(...dir)
					if (dirArray[dirArray.length - 1] !== "/") dirArray.push("/")
					dir = dirArray.join("")
					const dirContents = filesystem.query(dir)
					let string = ""
					dirContents.forEach((entry, index) => {
						if (filesystem.query(dir + entry) === true) {
							string += `${entry.padEnd(30)}file`
						} else {
							string += `${entry.padEnd(30)}file`
						}
						if (index !== dirContents.length - 1) {
							string += "\n"
						}
					})
					cm.remove()
					alert(string)
				}
				break;
			case 3:
				cmOption.textContent = "Restart OS"
				cmOption.onclick = () => {
					cm.remove()
					navigation.reload()
				}
				break;
		}
		cm.appendChild(cmOption)
	}
	gui.appendChild(cm)
}
const switchWindow = ({ target }) => {
	const frontWindow = document.querySelector(`[zIndex="'${maxZIndex - 1}'"]`)
	frontWindow.style.zIndex = target.style.zIndex
	frontWindow.setAttribute("zIndex", `'${frontWindow.style.zIndex}'`)
	target.style.zIndex = maxZIndex - 1
	target.setAttribute("zIndex", `'${maxZIndex - 1}'`)
}
const handleWindowDrag = ({ pageX, pageY }) => {
	if (activeWindow) {
		activeWindow.style.left = `${initX + (pageX - offsetX)}px`;
		activeWindow.style.top = `${initY + (pageY - offsetY)}px`;
	}
}
const apps = {
	snake: new App({
		name: "snake",
		version: "1.0.0",
		description: "A simple port of the classic Nokia snake game",
		author: "DevJesseCode",
		appCode: "data:text/html;base64,",
		appIcon: "./img/snake.svg",
		runOptions: {
			width: "700px",
			height: "500px"
		},
		fs: filesystem
	}),
	chess_game: new App({
		name: "chess",
		version: "1.0.0",
		description: "A simple chess game built with HTML, CSS, and Javascript",
		author: "DevJesseCode",
		appCode: 'data:text/html;base64,',
		runOptions: {
			width: "600px",
			height: "500px"
		},
		fs: filesystem
	}),
	google: new App({
		name: "google-search",
		version: "1.0.0",
		description: "An app to access google.com",
		author: "DevJesseCode",
		appCode: "https://www.google.com/",
		appIcon: "https://www.shareicon.net/data/2016/07/10/119930_google_512x512.png",
		runOptions: {
			width: "650px",
			height: "500px",
		},
		fs: filesystem
	})
}

gui.addEventListener("mousedown", ({ x, y, target }) => {
	const isAppWindowContainer = event.target.getAttribute("appwindowcontainer");
	if (isAppWindowContainer) {
		offsetX = x;
		offsetY = y;
		initX = parseInt(target.style.left) || 0;
		initY = parseInt(target.style.top) || 0;
		activeWindow = target;
		document.addEventListener("mousemove", handleWindowDrag);
	}
});

document.addEventListener("mouseup", () => {
	if (activeWindow) {
		document.removeEventListener("mousemove", handleWindowDrag);
	}
	activeWindow = null;
});

gui.addEventListener("contextmenu", (event) => {
	event.preventDefault()
	if (document.querySelectorAll(".context-menu")) {
		for (let element of document.querySelectorAll(".context-menu")) {
			element.remove()
		}
	}
	createContextMenu(event.x, event.y)
})
gui.addEventListener("click", (event) => {
	if (document.querySelectorAll(".context-menu")) {
		for (let element of document.querySelectorAll(".context-menu")) {
			element.remove()
		}
	}
	// clicks.cm.count++
	// if (clicks.cm.count >= 3) {
	// 	createContextMenu(event.x, event.y)
	// 	clicks.cm.count = 0
	// }
	// clearInterval(clicks.cm.interval)
	// clicks.cm.interval = setInterval(() => {
	// 	clicks.cm.count = 0
	// }, 500)
})
gui.addEventListener("click", event => {
	const { ctrlKey, shiftKey, altKey } = event
	if (ctrlKey && !shiftKey && !altKey) {
		createContextMenu(event.x, event.y)
	}
})